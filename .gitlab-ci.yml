# Base on official Docker image, which is built upon Debian Bullseye.
image: "rust:latest"

# A variable to export a PATH variable to the Linux-macOS cross-compiler.
variables:
  OSXCROSS_PATH_VAR: PATH=$(pwd)/osxcross/target/bin:$PATH

stages:          # List of stages for jobs, and their order of execution.
  - test
  - build
  - release

# Use cargo to test the first homework.
test_homework1:
  stage: test
  script:
    - rustc --version && cargo --version  # Print version info for debugging
    - cd homework1
    - cargo test --workspace --verbose

# Use cargo to test the second homework.
test_homework2:
  stage: test
  script:
    - rustc --version && cargo --version  # Print version info for debugging
    - cd homework2
    - cargo test --workspace --verbose

# Build binary for the Linux on amd64 architecture and save the result as an artifact.
# Save Job's ID as well, so the artifact could be referenced in the release job.
# Build for the first homework.
build_linux_amd64_homework1:
  stage: build
  script:
    - rustup target add x86_64-unknown-linux-gnu
    - cd homework1
    - cargo build --verbose --release --target x86_64-unknown-linux-gnu
    - echo "LINUX_JOB_ID_HOMEWORK1=${CI_JOB_ID}" >> linux_homework1.env
  artifacts:
    paths:
      - /builds/mikara/${CI_PROJECT_NAME}/homework1/target/x86_64-unknown-linux-gnu/release/se
    reports:
      dotenv: /builds/mikara/${CI_PROJECT_NAME}/homework1/linux_homework1.env
  allow_failure: true

# Build binary for the Linux on amd64 architecture and save the result as an artifact.
# Save Job's ID as well, so the artifact could be referenced in the release job.
# Build for the second homework.
build_linux_amd64_homework2:
  stage: build
  script:
    - rustup target add x86_64-unknown-linux-gnu
    - cd homework2
    - cargo build --verbose --release --target x86_64-unknown-linux-gnu
    - echo "LINUX_JOB_ID_HOMEWORK2=${CI_JOB_ID}" >> linux_homework2.env
  artifacts:
    paths:
      - /builds/mikara/${CI_PROJECT_NAME}/homework2/target/x86_64-unknown-linux-gnu/release/enc
    reports:
      dotenv: /builds/mikara/${CI_PROJECT_NAME}/homework2/linux_homework2.env
  allow_failure: true

# Build binary for the Windows on amd64 architecture and save the result as an artifact.
# Save Job's ID as well, so the artifact could be referenced in the release job.
# Build for the first homework.
build_windows_amd64_homework1:
  stage: build
  script:
    - rustup target add x86_64-pc-windows-gnu
    - apt update && apt install mingw-w64 -y
    - cd homework1
    - cargo build --verbose --release --target x86_64-pc-windows-gnu
    - echo "${CI_JOB_ID}" > CI_JOB_ID_WINDOWS_HOMEWORK1.txt
  artifacts:
    paths:
      - /builds/mikara/${CI_PROJECT_NAME}/homework1/target/x86_64-pc-windows-gnu/release/se.exe
#      - /builds/mikara/${CI_PROJECT_NAME}/homework1/CI_JOB_ID_WINDOWS_HOMEWORK1.txt

  allow_failure: true

# Build binary for the Windows on amd64 architecture and save the result as an artifact.
# Save Job's ID as well, so the artifact could be referenced in the release job.
# Build for the second homework.
build_windows_amd64_homework2:
  stage: build
  script:
    - rustup target add x86_64-pc-windows-gnu
    - apt update && apt install mingw-w64 -y
    - cd homework2
    - cargo build --verbose --release --target x86_64-pc-windows-gnu
    - echo "${CI_JOB_ID}" > CI_JOB_ID_WINDOWS_HOMEWORK2.txt
  artifacts:
    paths:
      - /builds/mikara/${CI_PROJECT_NAME}/homework2/target/x86_64-pc-windows-gnu/release/enc.exe
#      - /builds/mikara/${CI_PROJECT_NAME}/homework2/CI_JOB_ID_WINDOWS_HOMEWORK2.txt

  allow_failure: true

# Build binary for the macOS on amd64 and arm architectures and save the results as artifacts.
# Save Job's ID as well, so the artifact could be referenced in the release job.
# build_macos_amd64&arm:
#   stage: build
#   script:
#     - apt update
#     - apt install clang cmake git patch libssl-dev lzma-dev libxml2-dev bash llvm-dev uuid-dev -y
#     - git clone https://github.com/tpoechtrager/osxcross
#     - cd osxcross
#     - wget -P tarballs https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX11.3.sdk.tar.xz
#     - UNATTENDED=1 ./build.sh
#     - export $OSXCROSS_PATH_VAR
#     - rustup target add x86_64-apple-darwin
#     - rustup target add aarch64-apple-darwin
#     - cd ../homework1
#     - cargo build --verbose --release --target x86_64-apple-darwin
#     - cargo build --verbose --release --target aarch64-apple-darwin
#     - echo "${CI_JOB_ID}" > CI_JOB_ID_MACOS.txt
#   artifacts:
#     paths:
#       - /builds/mikara/${CI_PROJECT_NAME}/homework1/target/x86_64-apple-darwin/release/se
#       - /builds/mikara/${CI_PROJECT_NAME}/homework1/target/aarch64-apple-darwin/release/se
#       - /builds/mikara/${CI_PROJECT_NAME}/homework1/CI_JOB_ID_MACOS.txt
#   allow_failure: true

# Generate release every time a tag is created.
# Release Linux binary only separately, from experience, it is guaranteed to compile.
# Relase binaries for both homework 1 and 2.
release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - job: build_linux_amd64_homework1
      artifacts: true
    - job: build_linux_amd64_homework2
      artifacts: true
  script:
    - echo 'Running the release job.'
  release:
    name: "Release ${CI_COMMIT_TAG}"
    description: "Release of homework solutions under version ${CI_COMMIT_TAG}."
    tag_name: "${CI_COMMIT_TAG}"
    assets:
      links:
        - name: 'First homework binary for Linux on amd64 arch'
          url: "https://gitlab.cs.ttu.ee/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/-/jobs/${LINUX_JOB_ID_HOMEWORK1}/artifacts/download"
        - name: 'Second homework binary for Linux on amd64 arch'
          url: "https://gitlab.cs.ttu.ee/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/-/jobs/${LINUX_JOB_ID_HOMEWORK2}/artifacts/download"

# Experimental release section.

# Generate release every time a tag is created.
# Release Linux binary only separately, from experience, it is guaranteed to compile.
# release:
#   stage: release
#   image: registry.gitlab.com/gitlab-org/release-cli:latest
#   needs:
#     - job: build_windows_amd64_homework1
#       artifacts: true
#     - job: build_windows_amd64_homework2
#       artifacts: true
#   script:
#     - |
#       release-cli create --name "Release $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG \
#         --assets-link "{\"name\":\"Binary for Linux on amd64 arch\",\"url\":\"https://gitlab.cs.ttu.ee/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/-/jobs/${LINUX_JOB_ID}/artifacts/download\"}"
#   rules:
#     - if: $CI_COMMIT_TAG

#release:
#  stage: release
#  image: registry.gitlab.com/gitlab-org/release-cli:latest
#  script:
#    - |
#      release-cli create --name "Release $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG \
#        --assets-link "{\"name\":\"Executable file\",\"url\":\"https://gitlab.com/some/repo/-/jobs/`cat CI_JOB_ID.txt`/artifacts/file/your_app.exe\"}"
#  rules:
#    - if: $CI_COMMIT_TAG


#release:
#  stage: release
#  image: registry.gitlab.com/gitlab-org/release-cli:latest
#  needs:
#    - job: build_linux_amd64
#      artifacts: true
#  script:
#    - $CI_JOB_ID_WINDOWS > CI_JOB_ID_WINDOWS.txt
#  release:
#    name: 'Release $CI_COMMIT_TAG'
#    tag_name: '$CI_COMMIT_TAG'
#    ref: '$CI_COMMIT_TAG'
#    description: 'Release $CI_COMMIT_TAG'
#    assets:
#      links:
#        - name: "Binary for Linux on amd64 arch"
#          url: "https://gitlab.com/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME /-/jobs/<job_id>/artifacts/download"
#        - name: "Binary for Windows on amd64 arch"
#          url: "https://gitlab.com/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME /-/jobs/<job_id>/artifacts/download"
#        - name: "Binary for macOS on amd64 and arm arch"
#          url: "https://gitlab.com/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME /-/jobs/<job_id>/artifacts/download"
#  rules:
#    - if: $CI_COMMIT_TAG


# Additional options of how to pass a variable between stages.

#build:
#  stage: build
#  script:
#    - echo "BUILD_VERSION=hello" >> build.env
#  artifacts:
#    reports:
#      dotenv: build.env

#deploy:
#  stage: deploy
#  script:
#    - echo "$BUILD_VERSION"  # Output is: 'hello'
#  dependencies:
#    - build


#build:
#  stage: build
#  script:
#    - echo "BUILD_VERSION=hello" >> build.env
#  artifacts:
#    reports:
#      dotenv: build.env

#deploy:
#  stage: deploy
#  script:
#    - echo "$BUILD_VERSION"  # Output is: 'hello'
#  needs:
#    - job: build
#      artifacts: true
